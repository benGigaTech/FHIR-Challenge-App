<context>
# Overview  
The GigaTECH SMART on FHIR Allergy Display Application is a browser-based JavaScript application that integrates with Electronic Health Record (EHR) systems using the SMART on FHIR framework. The application solves the critical problem of providing healthcare providers with quick, secure access to patient allergy information directly within their EHR workflow. This application is designed for healthcare providers who need immediate access to patient allergy data during clinical encounters, ensuring patient safety and informed decision-making. The value proposition lies in seamless EHR integration, standardized FHIR R4 data exchange, and real-time allergy information display without disrupting existing clinical workflows.

# Core Features  
**1. EHR Launch Integration**
- Implements complete SMART EHR launch sequence for seamless integration
- Important for maintaining clinical workflow continuity and security
- Works through OAuth2 authorization flow with FHIR server authentication

**2. Patient Context Retrieval**
- Automatically retrieves current patient from EHR launch context
- Critical for ensuring correct patient data is displayed
- Eliminates manual patient selection and reduces medical errors

**3. Allergy Data Retrieval**
- Queries FHIR server for AllergyIntolerance resources using FHIR R4 specification
- Essential for comprehensive allergy information access
- Supports real-time data retrieval from connected EHR systems

**4. JSON Data Display**
- Shows complete allergy information in structured JSON format
- Important for technical users and integration testing
- Provides full FHIR resource details for comprehensive analysis

**5. Error Handling**
- Displays appropriate messages when no allergies are found
- Crucial for user experience and clinical safety
- Handles network errors, authentication failures, and server issues gracefully

**6. Provider and Patient Flexibility**
- Supports login with any available provider in the system
- Works with any patient in the connected EHR system
- Important for real-world deployment across different healthcare environments

# User Experience  
**User Personas:**
- Primary: Healthcare providers (physicians, nurses, pharmacists) accessing patient data during clinical encounters
- Secondary: Healthcare IT administrators testing and validating EHR integrations
- Tertiary: Developers implementing SMART on FHIR applications

**Key User Flows:**
1. Provider clicks SMART app launch link from within EHR
2. Application handles SMART launch sequence automatically
3. User authenticates with their EHR credentials
4. Application displays patient allergy information in JSON format
5. Provider reviews allergy data for clinical decision-making

**UI/UX Considerations:**
- Minimal interface focusing on data display rather than complex interactions
- JSON format display for technical accuracy and completeness
- Clear error messaging for cases with no allergy data
- Responsive design for various screen sizes and devices
- Fast loading times to support clinical workflow efficiency
</context>
<PRD>
# Technical Architecture  
**System Components:**
- Frontend: Vanilla JavaScript application with HTML/CSS
- Authentication: SMART on FHIR OAuth2 implementation
- Data Layer: FHIR R4 client for AllergyIntolerance resource queries
- Development Server: Node.js with http-server for static file serving

**Data Models:**
- FHIR AllergyIntolerance resources with key elements:
  - patient: Reference to patient
  - substance: Allergen identification
  - reaction: Reaction details and symptoms
  - criticality: Severity level classification
  - clinicalStatus: Active, inactive, resolved status

**APIs and Integrations:**
- SMART on FHIR launch sequence API
- FHIR R4 REST API for AllergyIntolerance queries
- OAuth2 authorization server integration
- EHR system integration via SMART framework

**Infrastructure Requirements:**
- Host: http://127.0.0.1:8080/
- Launch Command: npm run serve
- FHIR Server: R4-compatible server (e.g., https://r4.smarthealthit.org)
- Browser Compatibility: Modern web browsers with CORS support
- Development Dependencies: Node.js, npm, http-server

# Development Roadmap  
**Phase 1: Project Setup and Infrastructure (15-20 minutes)**
- Initialize npm project with proper package.json configuration
- Create basic file structure (src/, js/, css/ directories)
- Set up http-server with CORS support for development
- Install necessary dependencies
- Create basic HTML structure and entry points

**Phase 2: SMART on FHIR Integration (20-25 minutes)**
- Implement SMART launch flow with launch.html entry point
- Handle OAuth2 authorization code flow
- Implement secure token storage and management
- Extract patient context from launch parameters
- Set up authenticated FHIR client with proper headers

**Phase 3: Allergy Data Retrieval and Display (15-20 minutes)**
- Implement FHIR AllergyIntolerance search queries
- Process FHIR Bundle responses and extract relevant data
- Create JSON display functionality for allergy information
- Implement error handling for no-allergy cases
- Add responsive display logic for various data scenarios

**Phase 4: Testing and Validation (10-15 minutes)**
- Conduct end-to-end testing with provided test scenarios
- Validate functionality with Dr. Albertine Orn and Ms. Mariana Acuna
- Test cross-browser compatibility and CORS handling
- Verify error handling for edge cases
- Document any limitations or implementation notes

**Future Enhancements:**
- Enhanced UI/UX with human-readable allergy formatting
- Advanced error handling with retry mechanisms
- Unit testing framework implementation
- Allergy severity indicators and filtering capabilities
- Export functionality for allergy data

# Logical Dependency Chain
**Foundation Layer (Must be built first):**
1. Project setup and npm configuration - enables all development
2. Basic file structure and static server - provides development environment
3. HTML entry points (launch.html, index.html) - enables application access

**Authentication Layer (Builds on foundation):**
4. SMART launch flow implementation - enables EHR integration
5. OAuth2 authorization handling - provides secure access
6. Token management and storage - maintains authentication state

**Data Layer (Builds on authentication):**
7. FHIR client setup with authentication - enables data access
8. Patient context extraction - identifies target patient
9. AllergyIntolerance query implementation - retrieves allergy data

**Presentation Layer (Builds on data layer):**
10. JSON display functionality - shows retrieved data
11. Error handling and messaging - handles edge cases
12. Testing and validation - ensures functionality

**Quick Path to Visible Frontend:**
- Phases 1-2 provide a working SMART launch that can authenticate
- Phase 3 immediately adds visible allergy data display
- Each phase builds incrementally toward full functionality

# Risks and Mitigations  
**Technical Challenges:**
- SMART Launch Complexity: OAuth2 flow implementation can be error-prone
  - Mitigation: Follow official SMART tutorial, use browser dev tools for debugging
- FHIR Server Variations: Different servers may have implementation differences
  - Mitigation: Test with specified server, implement robust error handling
- CORS Issues: Browser security may block cross-origin requests
  - Mitigation: Use http-server with CORS enabled, understand server CORS policies

**MVP Definition Challenges:**
- Scope Creep: Temptation to add complex UI features beyond requirements
  - Mitigation: Focus on JSON display requirement, keep enhancements separate
- Authentication Complexity: OAuth2 flow may consume excessive development time
  - Mitigation: Use established patterns, prioritize working flow over perfect implementation

**Resource Constraints:**
- Time Limitations: 60-80 minute total development window
  - Mitigation: Prioritize core functionality, implement enhancements only if time permits
- Testing Coverage: Limited time for comprehensive testing
  - Mitigation: Focus on provided test cases, document known limitations

**Contingency Plans:**
- If SMART integration proves too complex, focus on core FHIR functionality first
- If time runs short, prioritize minimum requirements over enhancements
- Keep implementation simple and functional rather than over-engineered

# Appendix  
**Research Findings:**
- SMART on FHIR provides standardized EHR integration patterns
- FHIR R4 AllergyIntolerance resources contain comprehensive allergy data
- OAuth2 authorization flow is critical for secure healthcare data access
- JSON display meets technical requirements while enabling future enhancements

**Technical Specifications:**
- Test Provider: Dr. Albertine Orn
- Test Patient: Ms. Mariana Acuna (confirmed to have allergy data)
- Launch URL: http://127.0.0.1:8080/launch.html?launch=eyJhIjoiMSJ9&iss=https%3A%2F%2Flaunch.smarthealthit.org%2Fv%2Fr4%2Ffhir
- FHIR Server: https://r4.smarthealthit.org (R4-compatible)
- Required Query: GET [base]/AllergyIntolerance?patient=[patient-id]

**Success Criteria:**
- Minimum Viable Product: Successful launch, authentication, allergy retrieval, and JSON display
- Ideal Outcome: Robust error handling, clean code, comprehensive documentation
- Quality Metrics: All functional requirements met, cross-browser compatibility, proper error messaging
</PRD>
